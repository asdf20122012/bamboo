#!/usr/bin/env luajit

-- ATTEN: this file is not a module
package.path = './?.lua;./?/init.lua;./?/src/init.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;' .. package.path

require 'posix'
require 'lglib'
require 'bamboo'
local socket = require 'socket'
local utils = require 'bamboo.utils'
local normalizePath = require('lglib.path').normalize

local cmsgpack = require 'cmsgpack'
--require 'zmq.poller'
--local poller = zmq.poller(64)
--bamboo.poller = poller

local zmq = require'handler.zmq'
local httpserver = require'handler.http.server'
local ev = require'ev'
local loop = ev.Loop.default
bamboo.internal.loop = loop
local tremove = table.remove
local ctx = zmq.init(loop, 1)


-- ==============================================================
-- Global variables delarations: in top project code, we can see these variables
-- two important global variables
_G['web'] = nil
_G['req'] = nil
local DEFAULT_ALLOWED_METHODS = {GET = true, POST = true, PUT = true, DEL = true}

-- ==============================================================
-- 
local is_testing = false
-- APP_DIR: application directory, default is './', because we start it in application directory
local APP_DIR = './'
if arg[1] == '-f' and arg[2]:startsWith('tests/') then
  is_testing = true
else
  APP_DIR = arg[1] or './'
end

-- arg[2]: target file, every process handle one entry file, arg[2] is that file, default is 'handler_entry.lua'
local handler_file = 'app/handler_entry.lua'
if not is_testing and arg[2] then
   handler_file = arg[2]
end

-- settings.lua is the configuration file of one app, it sets at APP_DIR/settings.lua
local CONFIG_FILE = APP_DIR + "settings.lua"
local PROCESS_DIR = posix.getcwd()
-- the full directory of one application
local PROJECT_DIR = PROCESS_DIR + '/' + APP_DIR

-- add the project's direcotry to the lua searching path, to simplify the calling relation
package.path = package.path + (";%s/?.lua;%s/?/init.lua;"):format(PROJECT_DIR, PROJECT_DIR)


-- ==============================================================
-- read config from settings file
local config = utils.readSettings(bamboo.config)
bamboo.config = config

-- ==============================================================

config.route = config.route or '/'

_G['View'] = require 'bamboo.view'
_G['Form'] = require 'bamboo.form'
_G['Model'] = require 'bamboo.model'
_G['Session'] = require 'bamboo.session'
local Web = require 'bamboo.web'

-- ==============================================================
-- write some attributes to config
-- 
--config.APP_DIR = APP_DIR
--config.config_file = config.config_file or "config.lua"
--if config.webserver_dir then
--  -- format full directory of config_file, to find webserver's configuration
--  config.config_file = config.webserver_dir + '/' + config.config_file
--end

--
--local driver = require 'bamboo.webserver_driver'
--driver.loadConfig(config)



--local webserver_conn = assert(driver.connect(config), "Failed to connect to webserver.")

--bamboo.webserver_conn = webserver_conn
--config.webserver_conn = webserver_conn
--bamboo.cluster_channel_pub = webserver_conn.cluster_channel_pub

-- ==============================================================
-- load handler_entry file
local childenv = {}
-- load file handler_xxx.lua, make its environment as childenv, extract global variables in handler_xxx.lua to childenv
setfenv(assert(loadfile(handler_file)), setmetatable(childenv, {__index=_G}))()

-- get the router and simplify the entry file's URLS
-- assert(not isFalse(childenv.URLS[1]), '[Error] URLS value is not right. URLS[1] must be string and NOT be blank.')
local router = config.route or '/'
if childenv.URLS[1] then childenv.URLS[1] = nil end

table.update(bamboo.URLS, childenv.URLS)
childenv.URLS = bamboo.URLS
-- make handler_entry file as a module
-- make init() and finish() workable
bamboo.registerModule(childenv)

-- hook the disconnect handler
config.disconnect = childenv.disconnect
--config.clusterSubHandler = childenv.clusterSubHandler
--
--local cluster_listener = function ()
--  local ch_sub = webserver_conn.cluster_channel_sub
--  local msg = ch_sub:recv()
--  if childenv.clusterSubHandler then
--    childenv.clusterSubHandler(cmsgpack.unpack(msg))
--  end
--end


local URLS = childenv.URLS


-- logging file
local file_log_driver = require "logging.file"
local log_dir = config.log_dir or '/var/tmp/logs/'
local appname = config.appname or config.project_name or 'bambooapp'
local pid = posix.getpid('pid')
local ctime = os.date("%H%M%S", os.time())
local logfile = log_dir.."/"..appname.."_%s_"..ctime.."_"..pid..".log"
-- bambooapp date time pid
bamboo.logger = file_log_driver(logfile, "%Y-%m-%d")



-- ==============================================================
-- helper functions
-- 
-- check the structure legality
local function checkURLS(urls)
  for k, v in pairs(urls) do
    checkType(k, v, 'string', 'function')
  end
end
checkURLS(URLS)

local function makeUrlHandlerMapping(URLS)
  local table_concrete = {}
  local table_pattern = {}
  local table_rest = {}
  
  local base = router
  local url_t
  for k, v in pairs(URLS) do
    -- remove abundant '/'
    url_t = normalizePath(base..k):lower()
    
    -- separate the pattern format from normal concrete format
    if url_t:find('/:') then
      table_rest[url_t] = v
    elseif url_t:find('%(?%[?%%[%%%-_a-zA-Z]+%]?%+?%-?%)?') or url_t:find('%(?%.%+?%-?%)?') then
      table_pattern[url_t] = v
    else
      table_concrete[url_t] = v
    end
  end	
  
  return table_concrete, table_pattern, table_rest
end

local MappingTableConcrete, MappingTablePattern, MappingTableRest = makeUrlHandlerMapping(URLS)
-- keep syncronization
config.URLS = MappingTableConcrete
config.PATTERN_URLS = MappingTablePattern
config.REST_URLS = MappingTableRest

if not config.PRODUCTION then
  print('-->> URL Settings')
  ptable(MappingTableConcrete)
  ptable(MappingTablePattern)
  ptable(MappingTableRest)
end

local RESTFUL_NAMED_PARAMS = {}
local MappingTableRestTmp = {}
for k, v in pairs(MappingTableRest) do
  -- k now is the /xxx/:yyy/zzz format
  local newkey = k:gsub(':%w+', '%(%[%%w_%-%]%+%)')
  MappingTableRestTmp[newkey] = v
  RESTFUL_NAMED_PARAMS[newkey] = {}
  
  for name in k:gmatch('/:(%w+)') do
    -- { name1, name2, name3 }
    table.insert(RESTFUL_NAMED_PARAMS[newkey], name)
  end
end
MappingTableRest = MappingTableRestTmp




------------------------------------------------------------------------
-- find handler function by path
-- @param path:	coming path
-- @return:  two values, first is a handler function, second is a boolean to indict whether is state programming
------------------------------------------------------------------------
local function getHandlerByPath(req)
  local path = req.path:lower() 
  -- find the handler of URL config
  local parse = function (v)
    if type(v) == 'table' then
      checkType(v.handler, 'function')
      return v.handler
    elseif type(v) == 'function' then
      return v
    end
  end
  
  local key, value
  -- process concrete case first
  if MappingTableConcrete[path] then 
    return parse(MappingTableConcrete[path])
  end

  -- we now only support most 6 restful params
  local r1, r2, r3, r4, r5, r6
  for k, v in pairs(MappingTableRest) do
    r1, r2, r3, r4, r5, r6 = path:match('^' .. k .. '$')
    if r1 then
      local namelist = RESTFUL_NAMED_PARAMS[k]
      if r1 then req.REST[namelist[1]] = r1 end
      if r2 then req.REST[namelist[2]] = r2 end
      if r3 then req.REST[namelist[3]] = r3 end
      if r4 then req.REST[namelist[4]] = r4 end
      if r5 then req.REST[namelist[5]] = r5 end
      if r6 then req.REST[namelist[6]] = r6 end
      
      return parse(v)
    end
  
  end
  
  
  -- if process the pattern case
  for k, v in pairs(MappingTablePattern) do
    -- if some pattern cases meet one path meanwhile, and they have the save length, select the last one
    if path:match('^' .. k .. '$') then
      if not key or #k >= #key then 
        key, value = k, v
      end
    end
  end	

  -- if walks here, means this is a pattern case path
  if key and value then
    r1, r2, r3, r4, r5, r6 = path:match('^' .. key .. '$')
    if r1 then table.insert(req.REST, r1) end
    if r2 then table.insert(req.REST, r2) end
    if r3 then table.insert(req.REST, r3) end
    if r4 then table.insert(req.REST, r4) end
    if r5 then table.insert(req.REST, r5) end
    if r6 then table.insert(req.REST, r6) end

    return parse(value)
  end
  
  -- if walks here, means no suited case matched
  return nil
end




local function preParseReq(req)
  if req.method == 'GET' then
    req.GET = Form:parseQuery(req)
    req.POST = {}
    req.PARAMS = req.GET or {}
  else
    -- POST, PUT, DEL
    req.GET = Form:parseQuery(req)
    req.POST = Form:parse(req)
    req.PARAMS = req.GET and req.POST and table.update(req.GET, req.POST) or {}
  end
  
  
  
end


local function preprocessRequest (req)
  -- keep capatible
  req.conn_id = req.meta.conn_id

  if req.headers['x-requested-with'] == 'XMLHttpRequest' then req.ajax = true end
  req.userdata = {}
end


------------------------------------------------------------------------
-- stateless programming
-- @param webserver_conn:		connection object
-- @param main:		application main function
-- @param req:		request object
-- @return: none
------------------------------------------------------------------------
local function execute(main, req)
  local web = Web(main, req, config.pdb_config)
  -- update the latest web state to global variale web
  -- XXX, global scope variable is not good idea
  --_G['web'] = web
  
 -- bamboo.logger:info( 'handler func start time: '..socket.gettime())

  local good, err, extra = xpcall(function () 
    -- this is a coroutine
    --return coroutine.resume(web.controller, web, req)
    main(web, req)
  end, function (errmsg) 
    -- XXX: why can't print info here?
    print(debug.traceback(errmsg, 2))
    bamboo.logger:error(errmsg)
    
  end)

  if not good then
    print(good, err, extra)
    return web:error('handler error.')
  end
end


-- main loop
local webserver_request = function (zsock, data)
  local disconnect = config.disconnect
  local req, path
  local makeSessionId = Session.identRequest

  -- Get a message from the webserver, if have no, block to wait
  --req = webserver_conn:recv()
  -- update the latest request object to global request reference
  req = cmsgpack.unpack(data)

  if req and req.meta then
    _G['req'] = req
    if req.meta.type == 'disconnect' then
      print("DISCONNECT", req.meta.conn_id)
      if disconnect then disconnect(req) end
    elseif not DEFAULT_ALLOWED_METHODS[req.method] then
      print('Not allowed method', req.method)
      local web = Web(function()end, req)
      web:forbidden();
    -- if client close the connection
    else
      -- normalize the path's format
      path = normalizePath(req.path)
      req.path = path
      req.REST = {}
      -------------------------------------------------
      -- according coming path, find the corresponding handler function
      local main = getHandlerByPath(req)
      
      if not main then
        -- return 404 page
        print(('[Warning] No handler to process this path: %s.'):format(path))
        local web = Web(function()end, req)
        web:notFound();
      
      else
        if BAMBOO_DB and not config.disable_default_session_management then
          -- generate req.session_id
          makeSessionId(req)
          -- record session
          Session:set(req)
        end
        
        print(("req %s: %s"):format(config.route, req.meta.conn_id), os.date(), req.path, req.method, req.session_id or '')
        bamboo.logger:info(("req %s: %s\t%s\t%s\t%s"):format(config.route, req.meta.conn_id, req.path, req.method, req.session_id or ''))
        -- add some other attributes
        preprocessRequest(req)
        -- inject req.GET, req.POST, req.PARAMS
        preParseReq(req)
        
        -- call process handler to work
        execute(main, req)
      end

    end
  else
    print("FATAL ERROR", good, req, err)
  end
end






------------------------------------------------------------------------
-- Bamboo's main loop for every bamboo process
-- @param webserver_conn:	 	connection object
-- @param config:		config table from external
-- @return:				none
------------------------------------------------------------------------
local function run()
 
  if is_testing then
    while true do webserver_request() end
  else

    print('Enter main loop.')
    assert(config.pull_addr, 'missing pull_addr in settings.lua')
    assert(config.pub_addr, 'missing pub_addr in settings.lua')
    local zpull = ctx:pull(webserver_request)
    zpull:connect(config.pull_addr)

    local zpub = ctx:pub()
    zpub:connect(config.pub_addr)

    bamboo.ch_recv = zpull
    bamboo.ch_send = zpub
    print('ch_recv', bamboo.ch_recv)
    print('ch_send', bamboo.ch_send)
    -- libev default main loop
    loop:loop()
    print('Bamboo main loop aborted!')
  end
  
  print('Bamboo exited.')
end


------------------------------------------------------------------------
-- Bamboo start interface
-- @param config:	configuration table from application
-- @return:			none
------------------------------------------------------------------------
local function start()
    -- boot main loop
    run()
end

bamboo.EXPORT_FOR_TESTING = {
  config = config,
  run = run,
  updateConfig = updateConfig,
  DEFAULT_ALLOWED_METHODS = DEFAULT_ALLOWED_METHODS,
  ident = Session.identRequest,
  parseSessionId = Session.parseSessionId,
--	getState = getState,
}


------------------------------------------------------------
-- START BAMBOO
------------------------------------------------------------
-- normal case
if not is_testing then
   start(config)
end
   
