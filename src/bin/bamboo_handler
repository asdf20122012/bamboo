#!/usr/bin/env luajit

-- ATTEN: this file is not a module
package.path = './?.lua;./?/init.lua;./?/src/init.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua;' .. package.path

require 'posix'
require 'lglib'
require 'bamboo'
local utils = require 'bamboo.utils'
local normalizePath = require('lglib.path').normalize

local cmsgpack = require 'cmsgpack'
require 'zmq.poller'
local poller = zmq.poller(64)
bamboo.poller = poller

-- ==============================================================
-- Global variables delarations: in top project code, we can see these variables
-- two important global variables
_G['web'] = nil
_G['req'] = nil
local DEFAULT_ALLOWED_METHODS = {GET = true, POST = true, PUT = true, JSON = true, XML = true}

-- ==============================================================
-- 
local is_testing = false
-- APP_DIR: application directory, default is './', because we start it in application directory
local APP_DIR = './'
if arg[1] == '-f' and arg[2]:startsWith('tests/') then
	is_testing = true
else
	APP_DIR = arg[1] or './'
end

-- arg[2]: target file, every process handle one entry file, arg[2] is that file, default is 'handler_entry.lua'
local handler_file = 'app/handler_entry.lua'
if not is_testing and arg[2] then
   handler_file = arg[2]
end

-- settings.lua is the configuration file of one app, it sets at APP_DIR/settings.lua
local CONFIG_FILE = APP_DIR + "settings.lua"
local PROCESS_DIR = posix.getcwd()
-- the full directory of one application
local PROJECT_DIR = PROCESS_DIR + '/' + APP_DIR

-- add the project's direcotry to the lua searching path, to simplify the calling relation
package.path = package.path + (";%s/?.lua;%s/?/init.lua;"):format(PROJECT_DIR, PROJECT_DIR)


-- ==============================================================
-- read config from settings file
local config = utils.readSettings(bamboo.config)
bamboo.config = config

-- ==============================================================
-- connect redis, basic db
local redis = require 'bamboo.db.redis'

local DB_HOST = config.DB_HOST or '127.0.0.1'
local DB_PORT = config.DB_PORT or 6379
local WHICH_DB = config.WHICH_DB or 0
local AUTH = config.AUTH or nil

-- create a redis connection in this process
-- we will create one redis connection for every process
BAMBOO_DB = redis.connect {host=DB_HOST, port=DB_PORT, which = WHICH_DB, auth = AUTH}
assert(BAMBOO_DB, '[Error] Database connection is failed.')


_G['View'] = require 'bamboo.view'
_G['Form'] = require 'bamboo.form'
_G['Model'] = require 'bamboo.model'
_G['Session'] = require 'bamboo.session'
local Web = require 'bamboo.web'

-- ==============================================================
-- write some attributes to config
-- 
config.APP_DIR = APP_DIR
config.config_file = config.config_file or "config.lua"
if config.lgserver_dir then
	-- format full directory of config_file, to find lgserver's configuration
	config.config_file = config.lgserver_dir + '/' + config.config_file
end
config.route = config.route or '/'

local driver = require 'bamboo.lgserver_driver'
driver.loadConfig(config)
local lgserver_conn = assert(driver.connect(config), "Failed to connect to lgserver.")

bamboo.lgserver_conn = lgserver_conn
config.lgserver_conn = lgserver_conn
bamboo.cluster_channel_pub = lgserver_conn.cluster_channel_pub

-- ==============================================================
-- load handler_entry file
local childenv = {}
-- load file handler_xxx.lua, make its environment as childenv, extract global variables in handler_xxx.lua to childenv
setfenv(assert(loadfile(handler_file)), setmetatable(childenv, {__index=_G}))()

-- get the router and simplify the entry file's URLS
-- assert(not isFalse(childenv.URLS[1]), '[Error] URLS value is not right. URLS[1] must be string and NOT be blank.')
local router = config.route
if childenv.URLS[1] then childenv.URLS[1] = nil end

table.update(bamboo.URLS, childenv.URLS)
childenv.URLS = bamboo.URLS
-- make handler_entry file as a module
-- make init() and finish() workable
bamboo.registerModule(childenv)

-- hook the disconnect handler
config.disconnect = childenv.disconnect
config.clusterSubHandler = childenv.clusterSubHandler

local cluster_listener = function ()
	local ch_sub = lgserver_conn.cluster_channel_sub
	local msg = ch_sub:recv()
	if childenv.clusterSubHandler then
		childenv.clusterSubHandler(cmsgpack.unpack(msg))
	end
end


local URLS = childenv.URLS


-- ==============================================================
-- helper functions
-- 
-- check the structure legality
local function checkURLS(urls)
	for k, v in pairs(urls) do
		checkType(k, v, 'string', 'function')
	end
end
checkURLS(URLS)

local function makeUrlHandlerMapping(URLS)
	local table_concrete = {}
	local table_pattern = {}
	
	local base = router
	for k, v in pairs(URLS) do
		local url_t = base + k
		-- remove abundant '/'
		url_t = normalizePath(url_t)
		
		-- separate the pattern format from normal concrete format
		if url_t:find('%[?%%[%%%-_a-zA-Z]+%]?%+?%-?') or url_t:find('%.%+?%-?') then
			table_pattern[url_t:lower()] = v
		else
			table_concrete[url_t:lower()] = v
		end
	end	
	
	return table_concrete, table_pattern
end

local MappingTableConcrete, MappingTablePattern = makeUrlHandlerMapping(URLS)
-- keep syncronization
bamboo.URLS = MappingTableConcrete
bamboo.PATTERN_URLS = MappingTablePattern
config.URLS = MappingTableConcrete
config.PATTERN_URLS = MappingTablePattern


if not config.PRODUCTION then
print('-->> URL Settings')
ptable(MappingTableConcrete)
ptable(MappingTablePattern)
end
------------------------------------------------------------------------
-- find handler function by path
-- @param path:	coming path
-- @return:  two values, first is a handler function, second is a boolean to indict whether is state programming
------------------------------------------------------------------------
local function getHandlerByPath(path)
	local path = path:lower() 
	local parse = function (v)
		if type(v) == 'table' then
			checkType(v.handler, 'function')
			return v.handler
		elseif type(v) == 'function' then
			return v
		end
	end
	
	local key, value = "", nil
	-- process concrete case first
	if MappingTableConcrete[path] then return parse(MappingTableConcrete[path]), path end

	-- if process the pattern case
	for k, v in pairs(MappingTablePattern) do
		-- for pattern cases, we select the concretest one
		if k == path then
			return parse(v)
		-- if some pattern cases meet one path meanwhile, and they have the save length, select the last one
		elseif path:match('^' + k + '$') then
			if key == '' or #k >= #key then 
				key, value = k, v
			end
		end

	end	

	-- if walks here, means this is a pattern case path
	if key and value then
		return parse(value), key
	end
	
	-- if walks here, means no suited case matched
	return nil
end


-- For background tasks
local SUSPENDED_TASKS = {}
bamboo.SUSPENDED_TASKS = SUSPENDED_TASKS
-- conn: zmq connection
-- revents: return events
local connDispatcher = function (conn, revents)
    local state = SUSPENDED_TASKS[conn]
    if not state then return nil end

    return coroutine.resume(state.controller, conn:recv())
end
bamboo.internals.connDispatcher = connDispatcher





local function preparse(req)
	if req.method == 'GET' then
		req.GET = Form:parseQuery(req)
		req.POST = {}
		req.PARAMS = req.GET
	elseif req.method == 'POST' then
		req.GET = Form:parseQuery(req)
		req.POST = Form:parse(req)
		req.PARAMS = table.update(req.GET, req.POST)
	end
end


local function preprocessRequest (req)
	-- keep capatible
	req.conn_id = req.meta.conn_id

	if req.headers['x-requested-with'] == 'XMLHttpRequest' then req.ajax = true end
	req.userdata = {}
end


------------------------------------------------------------------------
-- stateless programming
-- @param lgserver_conn:		connection object
-- @param main:		application main function
-- @param req:		request object
-- @return: none
------------------------------------------------------------------------
local function execute(lgserver_conn, main, req)
    local web = Web(lgserver_conn, main, req)
    -- update the latest web state to global variale web
    _G['web'] = web
	
	local good, err = pcall(main, web, req)
    if not good and err then
		-- production mode
		if config.PRODUCTION then
			web.conn:reply_http('<h2>Page error.</h2>', 500, 'Page error.', nil, nil, req.meta)
			
			-- print debug info in console log
			print('[Error] Page error.')
			print("[Error]", err)
			print( debug.traceback() )
		else
			-- dev mode
			local errors = require 'bamboo.errors'
			errors.reportError(lgserver_conn, req, err, web)
		end
    end
end



------------------------------------------------------------------------
-- Bamboo's main loop for every bamboo process
-- @param lgserver_conn:	 	connection object
-- @param config:		config table from external
-- @return:				none
------------------------------------------------------------------------
local function run(lgserver_conn, config)
	local disconnect = ident, config.disconnect
	local req, path
	local makeSessionId = Session.identRequest

	-- main loop
	local lgserver_request = function ()
		-- Get a message from the lgserver, if have no, block to wait
		req = lgserver_conn:recv()
		-- update the latest request object to global request reference
		_G['req'] = req

		if req and req.meta then
			-- if client close the connection
			if req.meta.type == 'disconnect' then
				print("DISCONNECT", req.meta.conn_id)
				if disconnect then disconnect(req) end
			else
				-- normalize the path's format
				path = normalizePath(req.path)
              req.path = path
				-------------------------------------------------
				-- according coming path, find the corresponding handler function
				local main, copath = getHandlerByPath(path)
				if not main then
					-- return 404 page
					print(('[Warning] No handler to process this path: %s.'):format(path))
					lgserver_conn:reply_http('<h2>Page Not Found.</h2>', 404, 'Not Found', nil, nil, req.meta)
				else
					-- generate req.session_id
					makeSessionId(req)
					-- add some other attributes
					preprocessRequest(req)

					print(("req %s: %s"):format(config.route, req.meta.conn_id), os.date(), req.path, req.method, req.session_id)

					-- record session
					Session:set(req)
					
					-- inject req.GET, req.POST, req.PARAMS
					preparse(req)
					
					-- call process handler to work
					execute(lgserver_conn, main, req)
				end

			end
		else
			print("FATAL ERROR", good, req, err)
		end
	end
    
	if is_testing then
		while true do lgserver_request() end
	else
		print('Enter polling....')
		
		poller:add(lgserver_conn.cluster_channel_sub, zmq.POLLIN, cluster_listener)
		-- add the main lgserver request to poll
		-- lgserver_conn.channel_req is the socket pull from lgserver
		poller:add(lgserver_conn.channel_req, zmq.POLLIN, lgserver_request)
		-- start the main loop
		poller:start()
	end

	print('Bamboo main loop aborted!')
end


------------------------------------------------------------------------
-- Bamboo start interface
-- @param config:	configuration table from application
-- @return:			none
------------------------------------------------------------------------
local function start(config)
    -- boot main loop
    run(config.lgserver_conn, config)
end

bamboo.EXPORT_FOR_TESTING = {
	config = config,
	run = run,
	updateConfig = updateConfig,
	DEFAULT_ALLOWED_METHODS = DEFAULT_ALLOWED_METHODS,
	ident = Session.identRequest,
	parseSessionId = Session.parseSessionId,
--	getState = getState,
}


------------------------------------------------------------
-- START BAMBOO
------------------------------------------------------------
-- normal case
if not is_testing then
   start(config)
end
   
